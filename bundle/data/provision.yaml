heat_template_version: 2013-05-23
description: This template configures the resources required to provide OAI instance

parameters:

  # the MME IP Address - to be supplied by EPCaaS
  mme_pgwc_sgwc_input:
    type: string
    label: mme pgwc sgwc IP
    description: mme pgwc sgwc IP
    default: set_at_provisioning_time

  # note this is bern specific! TODO change for EURE settings
  private_mgmt_net:
    type: string
    description: >
      ID of private network mgmt
    default: 159ec24b-4ddd-47d3-831f-9e6fde9bbcf5

  # note this is bern specific! TODO change for EURE settings
  public_net:
    type: string
    description: >
      ID of public network
    default: fde9f17b-eb51-4d4b-a474-deb583d03d86

resources:

  config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: mme_pgwc_sgwc
      outputs:
      - name: result
      config: |
        #!/bin/sh -x
        echo "Writing to /tmp/$bar"
        touch /tmp/provision
        echo 'ok' > /tmp/provision
        echo 'ok again' >> /tmp/provision
        echo $mme_pgwc_sgwc >> /tmp/provision
        cd /home/ubuntu/openair4G/cmake_targets/lte_build_oai/build
        MY_IP=`ip addr show dev eth0 | awk -F'[ /]*' '/inet /{print $3"/"$4}'`
        sed -i 's#MY_IP_ADDRESS_REPLACE#'$MY_IP'#g' ../../../targets/PROJECTS/GENERIC-LTE-EPC/CONF/enb.band7.tm1.exmimo2.openEPC.conf
        sed -i 's#MME_IP_ADDRESS_REPLACE#'$mme_pgwc_sgwc'#g' ../../../targets/PROJECTS/GENERIC-LTE-EPC/CONF/enb.band7.tm1.exmimo2.openEPC.conf
        # ./lte-softmodem -O ../../../targets/PROJECTS/GENERIC-LTE-EPC/CONF/enb.band7.tm1.exmimo2.openEPC.conf -S
        # echo "Output to stderr" 1>&2

  deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: config
      server:
        get_resource: server
      input_values:
        mme_pgwc_sgwc: {get_param: mme_pgwc_sgwc_input}

  server:
    type: OS::Nova::Server
    properties:
      key_name: edmo-bern
      image: ENB-OAI
      flavor: m1.large
      networks:
        - port: { get_resource: my_port }
      user_data_format: SOFTWARE_CONFIG

  my_port:
    type: OS::Neutron::Port
    properties:
      replacement_policy: AUTO
      network_id: {get_param: private_mgmt_net}

  my_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net}
      port_id: { get_resource:  my_port }
